# Target Platform
ARG TARGETPLATFORM

# Build Platform
# ARG BUILDPLATFORM

# Python Version Argument (default to 3.12)
ARG PYTHON_VERSION=3.12

# Using Debian Standard Image
# FROM debian:bookworm

# Using Python Debian Bookworm Image
FROM python:${PYTHON_VERSION}-bookworm

# Define Application Path
ARG APP_PATH="/opt/app"

# Define Path for Benchmark Tool Install
ARG VENV_BENCHMARK_PATH="/opt/llm-benchmark"

# Define Path for Ollama Install  
ARG OLLAMA_PATH="/opt/ollama"

# Create /opt Directory
RUN mkdir -p "/opt"

# Create Directory for App
RUN mkdir -p "${APP_PATH}"

# Create Directory for Venv
RUN mkdir -p "${VENV_BENCHMARK_PATH}"
RUN mkdir -p "${OLLAMA_PATH}"

# Change Directory
WORKDIR "${APP_PATH}"

# Copy Sources
COPY app/ "${APP_PATH}"

# Use Cache (Keep downloaded Files)
# They are stored in the Cache directory, NOT in the final Container Image
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

# Update Sources
# Install required Packages
RUN --mount=type=cache,mode=0777,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,mode=0777,target=/var/lib/apt,sharing=locked \
    apt-get update && \
    apt-get install --no-install-recommends -y ca-certificates bash curl wget && \
    apt-get install --no-install-recommends -y python3 python3-pip python3-venv && \
    apt-get install --no-install-recommends -y gcc python3-dev python3-psutil psutils linux-headers-amd64 tar && \
    echo "Finished installing base Packages"

# Change Shell
RUN chsh -s /bin/bash root
RUN export SHELL="/bin/bash"
RUN ln -sf /bin/bash /bin/sh

# set ENV to execute startup scripts
ENV ENV /etc/profile

# Change Directory and Copy requirements.txt
WORKDIR "/opt"
COPY requirements.txt requirements.txt

# Create Python venvs
RUN python3 -m venv "${VENV_BENCHMARK_PATH}"

# Set PATH Variable to include venv
ENV PATH="${VENV_BENCHMARK_PATH}/bin:${OLLAMA_PATH}/bin:$PATH"

# Activate venv for ollama (these are just the Ollama LIBRARIES !!!)
# RUN python3 -m venv "${OLLAMA_PATH}"
# RUN source "${OLLAMA_PATH}/bin/activate"

# Install required Packages
# RUN --mount=type=cache,mode=0777,target=/var/lib/pip,sharing=locked \
#     python -m pip install --upgrade pip && \
#     pip install --cache-dir /var/lib/pip -r "/opt/requirements.txt"

# Create folder for Caching Packages
RUN mkdir -p /var/lib/installer

# Install Ollama
RUN --mount=type=cache,mode=0777,target=/var/lib/installer/ollama,sharing=locked \
    cd ${OLLAMA_PATH} && \
    if [[ ! -f /var/lib/installer/ollama/ollama-linux-amd64.tgz ]]; then curl -L https://ollama.com/download/ollama-linux-amd64.tgz -o /var/lib/installer/ollama/ollama-linux-amd64.tgz; fi && \
    tar xvzf /var/lib/installer/ollama/ollama-linux-amd64.tgz --strip-components=1 -C ${OLLAMA_PATH}/

# Activate venv for llm_benchmark
RUN source "${VENV_BENCHMARK_PATH}/bin/activate"

# Install required Packages
RUN --mount=type=cache,mode=0777,target=/var/lib/pip,sharing=locked \
    python -m pip install --upgrade pip && \
    pip install --cache-dir /var/lib/pip llm-benchmark

# Set PATH Variable to Include Application
ENV PATH="${APP_PATH}/bin:$PATH"

# Change Directory
WORKDIR "${APP_PATH}"

# Copy and Execute Script for Installation and Initialization of App
COPY docker-entrypoint.sh /opt/
RUN chmod +x /opt/docker-entrypoint.sh
ENTRYPOINT ["/opt/docker-entrypoint.sh"]
